// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { CoreLoginDestroyData, CoreLoginDestroyResponses, CoreLoginRetrieveData, CoreLoginRetrieveResponses, CoreLoginCreateData, CoreLoginCreateResponses, CoreQrAuthRetrieveData, CoreQrAuthRetrieveResponses, CoreQrAuthCreateData, CoreQrAuthCreateResponses, CoreQrAuthUpdateData, CoreQrAuthUpdateResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Login/Logout API View
 */
export const coreLoginDestroy = <ThrowOnError extends boolean = false>(options?: Options<CoreLoginDestroyData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<CoreLoginDestroyResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/core/login/',
        ...options
    });
};

/**
 * Login/Logout API View
 */
export const coreLoginRetrieve = <ThrowOnError extends boolean = false>(options?: Options<CoreLoginRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CoreLoginRetrieveResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/core/login/',
        ...options
    });
};

/**
 * Login/Logout API View
 */
export const coreLoginCreate = <ThrowOnError extends boolean = false>(options: Options<CoreLoginCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CoreLoginCreateResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/core/login/',
        ...options
    });
};

/**
 * API View to send QR and start a sever sent event.
 */
export const coreQrAuthRetrieve = <ThrowOnError extends boolean = false>(options?: Options<CoreQrAuthRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CoreQrAuthRetrieveResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/core/qr-auth/',
        ...options
    });
};

/**
 * API View to login the system after the server sent event has been closed.
 */
export const coreQrAuthCreate = <ThrowOnError extends boolean = false>(options?: Options<CoreQrAuthCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CoreQrAuthCreateResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/core/qr-auth/',
        ...options
    });
};

/**
 * QR Management API View
 */
export const coreQrAuthUpdate = <ThrowOnError extends boolean = false>(options?: Options<CoreQrAuthUpdateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<CoreQrAuthUpdateResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/core/qr-auth/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};