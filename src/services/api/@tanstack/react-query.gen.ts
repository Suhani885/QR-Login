// This file is auto-generated by @hey-api/openapi-ts

import { type Options, get, getV1GetByOrganizationSlugByProjectSlug, postV1InternalSyncUsers, postV1InternalWebhooksClerk, postV1InternalWebhooksHeyApi, getV1Organizations, postV1Organizations, deleteV1OrganizationsByOrganizationSlug, getV1OrganizationsByOrganizationSlugMembers, postV1OrganizationsByOrganizationSlugMembers, deleteV1OrganizationsByOrganizationSlugMembersByUserId, getV1OrganizationsByOrganizationSlugProjects, postV1OrganizationsByOrganizationSlugProjects, deleteV1OrganizationsByOrganizationSlugProjectsByProjectSlug, getV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeys, postV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeys, deleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysByApiKeyId, postV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysByApiKeyId, getV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecifications, deleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationId, getV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationId, getV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdUrl, getV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooks, postV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooks, deleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookId, getV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookId, postV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookId, postV1Specifications, getV1UsersMe, getV1UsersByUserIdApiKeys, postV1UsersByUserIdApiKeys, deleteV1UsersByUserIdApiKeysByApiKeyId, postV1UsersByUserIdApiKeysByApiKeyId, getV1UsersByUserIdRoles, getV1UsersByUserIdWaitlists, postV1UsersByUserIdWaitlists, deleteV1UsersByUserIdWaitlistsByWaitlistId, putV1UsersByUserIdWaitlistsByWaitlistId } from '../sdk.gen';
import { queryOptions, type UseMutationOptions, infiniteQueryOptions, type InfiniteData } from '@tanstack/react-query';
import type { GetData, GetV1GetByOrganizationSlugByProjectSlugData, PostV1InternalSyncUsersData, PostV1InternalSyncUsersError, PostV1InternalSyncUsersResponse, PostV1InternalWebhooksClerkData, PostV1InternalWebhooksClerkError, PostV1InternalWebhooksClerkResponse, PostV1InternalWebhooksHeyApiData, PostV1InternalWebhooksHeyApiError, PostV1InternalWebhooksHeyApiResponse, GetV1OrganizationsData, GetV1OrganizationsError, GetV1OrganizationsResponse, PostV1OrganizationsData, PostV1OrganizationsError, PostV1OrganizationsResponse, DeleteV1OrganizationsByOrganizationSlugData, DeleteV1OrganizationsByOrganizationSlugError, DeleteV1OrganizationsByOrganizationSlugResponse, GetV1OrganizationsByOrganizationSlugMembersData, GetV1OrganizationsByOrganizationSlugMembersError, GetV1OrganizationsByOrganizationSlugMembersResponse, PostV1OrganizationsByOrganizationSlugMembersData, PostV1OrganizationsByOrganizationSlugMembersError, PostV1OrganizationsByOrganizationSlugMembersResponse, DeleteV1OrganizationsByOrganizationSlugMembersByUserIdData, DeleteV1OrganizationsByOrganizationSlugMembersByUserIdError, DeleteV1OrganizationsByOrganizationSlugMembersByUserIdResponse, GetV1OrganizationsByOrganizationSlugProjectsData, GetV1OrganizationsByOrganizationSlugProjectsError, GetV1OrganizationsByOrganizationSlugProjectsResponse, PostV1OrganizationsByOrganizationSlugProjectsData, PostV1OrganizationsByOrganizationSlugProjectsError, PostV1OrganizationsByOrganizationSlugProjectsResponse, DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugData, DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugError, DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugResponse, GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysData, GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysError, GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysResponse, PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysData, PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysError, PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysResponse, DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysByApiKeyIdData, DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysByApiKeyIdError, DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysByApiKeyIdResponse, PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysByApiKeyIdData, PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysByApiKeyIdError, PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysByApiKeyIdResponse, GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsData, GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsError, GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsResponse, DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdData, DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdError, DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdResponse, GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdData, GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdUrlData, GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksData, GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksError, GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksResponse, PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksData, PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksError, PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksResponse, DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdData, DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdError, DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdResponse, GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdData, PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdData, PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdError, PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdResponse, PostV1SpecificationsData, PostV1SpecificationsError, PostV1SpecificationsResponse, GetV1UsersMeData, GetV1UsersByUserIdApiKeysData, GetV1UsersByUserIdApiKeysError, GetV1UsersByUserIdApiKeysResponse, PostV1UsersByUserIdApiKeysData, PostV1UsersByUserIdApiKeysError, PostV1UsersByUserIdApiKeysResponse, DeleteV1UsersByUserIdApiKeysByApiKeyIdData, DeleteV1UsersByUserIdApiKeysByApiKeyIdError, DeleteV1UsersByUserIdApiKeysByApiKeyIdResponse, PostV1UsersByUserIdApiKeysByApiKeyIdData, PostV1UsersByUserIdApiKeysByApiKeyIdError, PostV1UsersByUserIdApiKeysByApiKeyIdResponse, GetV1UsersByUserIdRolesData, GetV1UsersByUserIdRolesError, GetV1UsersByUserIdRolesResponse, GetV1UsersByUserIdWaitlistsData, GetV1UsersByUserIdWaitlistsError, GetV1UsersByUserIdWaitlistsResponse, PostV1UsersByUserIdWaitlistsData, PostV1UsersByUserIdWaitlistsError, PostV1UsersByUserIdWaitlistsResponse, DeleteV1UsersByUserIdWaitlistsByWaitlistIdData, DeleteV1UsersByUserIdWaitlistsByWaitlistIdError, DeleteV1UsersByUserIdWaitlistsByWaitlistIdResponse, PutV1UsersByUserIdWaitlistsByWaitlistIdData, PutV1UsersByUserIdWaitlistsByWaitlistIdError, PutV1UsersByUserIdWaitlistsByWaitlistIdResponse } from '../types.gen';
import type { AxiosError } from 'axios';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: options?.baseURL || (options?.client ?? _heyApiClient).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getQueryKey = (options?: Options<GetData>) => createQueryKey('get', options);

export const getOptions = (options?: Options<GetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await get({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getQueryKey(options)
    });
};

export const getV1GetByOrganizationSlugByProjectSlugQueryKey = (options: Options<GetV1GetByOrganizationSlugByProjectSlugData>) => createQueryKey('getV1GetByOrganizationSlugByProjectSlug', options);

export const getV1GetByOrganizationSlugByProjectSlugOptions = (options: Options<GetV1GetByOrganizationSlugByProjectSlugData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV1GetByOrganizationSlugByProjectSlug({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV1GetByOrganizationSlugByProjectSlugQueryKey(options)
    });
};

export const postV1InternalSyncUsersMutation = (options?: Partial<Options<PostV1InternalSyncUsersData>>): UseMutationOptions<PostV1InternalSyncUsersResponse, AxiosError<PostV1InternalSyncUsersError>, Options<PostV1InternalSyncUsersData>> => {
    const mutationOptions: UseMutationOptions<PostV1InternalSyncUsersResponse, AxiosError<PostV1InternalSyncUsersError>, Options<PostV1InternalSyncUsersData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postV1InternalSyncUsers({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postV1InternalWebhooksClerkMutation = (options?: Partial<Options<PostV1InternalWebhooksClerkData>>): UseMutationOptions<PostV1InternalWebhooksClerkResponse, AxiosError<PostV1InternalWebhooksClerkError>, Options<PostV1InternalWebhooksClerkData>> => {
    const mutationOptions: UseMutationOptions<PostV1InternalWebhooksClerkResponse, AxiosError<PostV1InternalWebhooksClerkError>, Options<PostV1InternalWebhooksClerkData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postV1InternalWebhooksClerk({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postV1InternalWebhooksHeyApiMutation = (options?: Partial<Options<PostV1InternalWebhooksHeyApiData>>): UseMutationOptions<PostV1InternalWebhooksHeyApiResponse, AxiosError<PostV1InternalWebhooksHeyApiError>, Options<PostV1InternalWebhooksHeyApiData>> => {
    const mutationOptions: UseMutationOptions<PostV1InternalWebhooksHeyApiResponse, AxiosError<PostV1InternalWebhooksHeyApiError>, Options<PostV1InternalWebhooksHeyApiData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postV1InternalWebhooksHeyApi({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getV1OrganizationsQueryKey = (options?: Options<GetV1OrganizationsData>) => createQueryKey('getV1Organizations', options);

export const getV1OrganizationsOptions = (options?: Options<GetV1OrganizationsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV1Organizations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV1OrganizationsQueryKey(options)
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<Options>, page: K) => {
    const params = {
        ...queryKey[0]
    };
    if (page.body) {
        params.body = {
            ...queryKey[0].body as any,
            ...page.body as any
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path as any,
            ...page.path as any
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query as any,
            ...page.query as any
        };
    }
    return params as unknown as typeof page;
};

export const getV1OrganizationsInfiniteQueryKey = (options?: Options<GetV1OrganizationsData>): QueryKey<Options<GetV1OrganizationsData>> => createQueryKey('getV1Organizations', options, true);

export const getV1OrganizationsInfiniteOptions = (options?: Options<GetV1OrganizationsData>) => {
    return infiniteQueryOptions<GetV1OrganizationsResponse, AxiosError<GetV1OrganizationsError>, InfiniteData<GetV1OrganizationsResponse>, QueryKey<Options<GetV1OrganizationsData>>, string | Pick<QueryKey<Options<GetV1OrganizationsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetV1OrganizationsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    after: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getV1Organizations({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV1OrganizationsInfiniteQueryKey(options)
    });
};

export const postV1OrganizationsMutation = (options?: Partial<Options<PostV1OrganizationsData>>): UseMutationOptions<PostV1OrganizationsResponse, AxiosError<PostV1OrganizationsError>, Options<PostV1OrganizationsData>> => {
    const mutationOptions: UseMutationOptions<PostV1OrganizationsResponse, AxiosError<PostV1OrganizationsError>, Options<PostV1OrganizationsData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postV1Organizations({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteV1OrganizationsByOrganizationSlugMutation = (options?: Partial<Options<DeleteV1OrganizationsByOrganizationSlugData>>): UseMutationOptions<DeleteV1OrganizationsByOrganizationSlugResponse, AxiosError<DeleteV1OrganizationsByOrganizationSlugError>, Options<DeleteV1OrganizationsByOrganizationSlugData>> => {
    const mutationOptions: UseMutationOptions<DeleteV1OrganizationsByOrganizationSlugResponse, AxiosError<DeleteV1OrganizationsByOrganizationSlugError>, Options<DeleteV1OrganizationsByOrganizationSlugData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteV1OrganizationsByOrganizationSlug({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getV1OrganizationsByOrganizationSlugMembersQueryKey = (options: Options<GetV1OrganizationsByOrganizationSlugMembersData>) => createQueryKey('getV1OrganizationsByOrganizationSlugMembers', options);

export const getV1OrganizationsByOrganizationSlugMembersOptions = (options: Options<GetV1OrganizationsByOrganizationSlugMembersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV1OrganizationsByOrganizationSlugMembers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV1OrganizationsByOrganizationSlugMembersQueryKey(options)
    });
};

export const getV1OrganizationsByOrganizationSlugMembersInfiniteQueryKey = (options: Options<GetV1OrganizationsByOrganizationSlugMembersData>): QueryKey<Options<GetV1OrganizationsByOrganizationSlugMembersData>> => createQueryKey('getV1OrganizationsByOrganizationSlugMembers', options, true);

export const getV1OrganizationsByOrganizationSlugMembersInfiniteOptions = (options: Options<GetV1OrganizationsByOrganizationSlugMembersData>) => {
    return infiniteQueryOptions<GetV1OrganizationsByOrganizationSlugMembersResponse, AxiosError<GetV1OrganizationsByOrganizationSlugMembersError>, InfiniteData<GetV1OrganizationsByOrganizationSlugMembersResponse>, QueryKey<Options<GetV1OrganizationsByOrganizationSlugMembersData>>, string | Pick<QueryKey<Options<GetV1OrganizationsByOrganizationSlugMembersData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetV1OrganizationsByOrganizationSlugMembersData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    after: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getV1OrganizationsByOrganizationSlugMembers({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV1OrganizationsByOrganizationSlugMembersInfiniteQueryKey(options)
    });
};

export const postV1OrganizationsByOrganizationSlugMembersMutation = (options?: Partial<Options<PostV1OrganizationsByOrganizationSlugMembersData>>): UseMutationOptions<PostV1OrganizationsByOrganizationSlugMembersResponse, AxiosError<PostV1OrganizationsByOrganizationSlugMembersError>, Options<PostV1OrganizationsByOrganizationSlugMembersData>> => {
    const mutationOptions: UseMutationOptions<PostV1OrganizationsByOrganizationSlugMembersResponse, AxiosError<PostV1OrganizationsByOrganizationSlugMembersError>, Options<PostV1OrganizationsByOrganizationSlugMembersData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postV1OrganizationsByOrganizationSlugMembers({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteV1OrganizationsByOrganizationSlugMembersByUserIdMutation = (options?: Partial<Options<DeleteV1OrganizationsByOrganizationSlugMembersByUserIdData>>): UseMutationOptions<DeleteV1OrganizationsByOrganizationSlugMembersByUserIdResponse, AxiosError<DeleteV1OrganizationsByOrganizationSlugMembersByUserIdError>, Options<DeleteV1OrganizationsByOrganizationSlugMembersByUserIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteV1OrganizationsByOrganizationSlugMembersByUserIdResponse, AxiosError<DeleteV1OrganizationsByOrganizationSlugMembersByUserIdError>, Options<DeleteV1OrganizationsByOrganizationSlugMembersByUserIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteV1OrganizationsByOrganizationSlugMembersByUserId({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getV1OrganizationsByOrganizationSlugProjectsQueryKey = (options: Options<GetV1OrganizationsByOrganizationSlugProjectsData>) => createQueryKey('getV1OrganizationsByOrganizationSlugProjects', options);

export const getV1OrganizationsByOrganizationSlugProjectsOptions = (options: Options<GetV1OrganizationsByOrganizationSlugProjectsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV1OrganizationsByOrganizationSlugProjects({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV1OrganizationsByOrganizationSlugProjectsQueryKey(options)
    });
};

export const getV1OrganizationsByOrganizationSlugProjectsInfiniteQueryKey = (options: Options<GetV1OrganizationsByOrganizationSlugProjectsData>): QueryKey<Options<GetV1OrganizationsByOrganizationSlugProjectsData>> => createQueryKey('getV1OrganizationsByOrganizationSlugProjects', options, true);

export const getV1OrganizationsByOrganizationSlugProjectsInfiniteOptions = (options: Options<GetV1OrganizationsByOrganizationSlugProjectsData>) => {
    return infiniteQueryOptions<GetV1OrganizationsByOrganizationSlugProjectsResponse, AxiosError<GetV1OrganizationsByOrganizationSlugProjectsError>, InfiniteData<GetV1OrganizationsByOrganizationSlugProjectsResponse>, QueryKey<Options<GetV1OrganizationsByOrganizationSlugProjectsData>>, string | Pick<QueryKey<Options<GetV1OrganizationsByOrganizationSlugProjectsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetV1OrganizationsByOrganizationSlugProjectsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    after: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getV1OrganizationsByOrganizationSlugProjects({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV1OrganizationsByOrganizationSlugProjectsInfiniteQueryKey(options)
    });
};

export const postV1OrganizationsByOrganizationSlugProjectsMutation = (options?: Partial<Options<PostV1OrganizationsByOrganizationSlugProjectsData>>): UseMutationOptions<PostV1OrganizationsByOrganizationSlugProjectsResponse, AxiosError<PostV1OrganizationsByOrganizationSlugProjectsError>, Options<PostV1OrganizationsByOrganizationSlugProjectsData>> => {
    const mutationOptions: UseMutationOptions<PostV1OrganizationsByOrganizationSlugProjectsResponse, AxiosError<PostV1OrganizationsByOrganizationSlugProjectsError>, Options<PostV1OrganizationsByOrganizationSlugProjectsData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postV1OrganizationsByOrganizationSlugProjects({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugMutation = (options?: Partial<Options<DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugData>>): UseMutationOptions<DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugResponse, AxiosError<DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugError>, Options<DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugData>> => {
    const mutationOptions: UseMutationOptions<DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugResponse, AxiosError<DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugError>, Options<DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteV1OrganizationsByOrganizationSlugProjectsByProjectSlug({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysQueryKey = (options: Options<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysData>) => createQueryKey('getV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeys', options);

export const getV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysOptions = (options: Options<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeys({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysQueryKey(options)
    });
};

export const getV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysInfiniteQueryKey = (options: Options<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysData>): QueryKey<Options<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysData>> => createQueryKey('getV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeys', options, true);

export const getV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysInfiniteOptions = (options: Options<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysData>) => {
    return infiniteQueryOptions<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysResponse, AxiosError<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysError>, InfiniteData<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysResponse>, QueryKey<Options<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysData>>, string | Pick<QueryKey<Options<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    after: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeys({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysInfiniteQueryKey(options)
    });
};

export const postV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysMutation = (options?: Partial<Options<PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysData>>): UseMutationOptions<PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysResponse, AxiosError<PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysError>, Options<PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysData>> => {
    const mutationOptions: UseMutationOptions<PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysResponse, AxiosError<PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysError>, Options<PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeys({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysByApiKeyIdMutation = (options?: Partial<Options<DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysByApiKeyIdData>>): UseMutationOptions<DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysByApiKeyIdResponse, AxiosError<DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysByApiKeyIdError>, Options<DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysByApiKeyIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysByApiKeyIdResponse, AxiosError<DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysByApiKeyIdError>, Options<DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysByApiKeyIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysByApiKeyId({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysByApiKeyIdMutation = (options?: Partial<Options<PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysByApiKeyIdData>>): UseMutationOptions<PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysByApiKeyIdResponse, AxiosError<PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysByApiKeyIdError>, Options<PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysByApiKeyIdData>> => {
    const mutationOptions: UseMutationOptions<PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysByApiKeyIdResponse, AxiosError<PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysByApiKeyIdError>, Options<PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysByApiKeyIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysByApiKeyId({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsQueryKey = (options: Options<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsData>) => createQueryKey('getV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecifications', options);

export const getV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsOptions = (options: Options<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecifications({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsQueryKey(options)
    });
};

export const getV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsInfiniteQueryKey = (options: Options<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsData>): QueryKey<Options<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsData>> => createQueryKey('getV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecifications', options, true);

export const getV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsInfiniteOptions = (options: Options<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsData>) => {
    return infiniteQueryOptions<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsResponse, AxiosError<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsError>, InfiniteData<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsResponse>, QueryKey<Options<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsData>>, string | Pick<QueryKey<Options<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    after: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecifications({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsInfiniteQueryKey(options)
    });
};

export const deleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdMutation = (options?: Partial<Options<DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdData>>): UseMutationOptions<DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdResponse, AxiosError<DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdError>, Options<DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdResponse, AxiosError<DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdError>, Options<DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationId({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdQueryKey = (options: Options<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdData>) => createQueryKey('getV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationId', options);

export const getV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdOptions = (options: Options<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdQueryKey(options)
    });
};

export const getV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdUrlQueryKey = (options: Options<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdUrlData>) => createQueryKey('getV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdUrl', options);

export const getV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdUrlOptions = (options: Options<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdUrlData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdUrl({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdUrlQueryKey(options)
    });
};

export const getV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksQueryKey = (options: Options<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksData>) => createQueryKey('getV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooks', options);

export const getV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksOptions = (options: Options<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooks({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksQueryKey(options)
    });
};

export const getV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksInfiniteQueryKey = (options: Options<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksData>): QueryKey<Options<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksData>> => createQueryKey('getV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooks', options, true);

export const getV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksInfiniteOptions = (options: Options<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksData>) => {
    return infiniteQueryOptions<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksResponse, AxiosError<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksError>, InfiniteData<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksResponse>, QueryKey<Options<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksData>>, string | Pick<QueryKey<Options<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    after: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooks({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksInfiniteQueryKey(options)
    });
};

export const postV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksMutation = (options?: Partial<Options<PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksData>>): UseMutationOptions<PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksResponse, AxiosError<PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksError>, Options<PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksData>> => {
    const mutationOptions: UseMutationOptions<PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksResponse, AxiosError<PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksError>, Options<PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooks({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdMutation = (options?: Partial<Options<DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdData>>): UseMutationOptions<DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdResponse, AxiosError<DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdError>, Options<DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdResponse, AxiosError<DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdError>, Options<DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookId({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdQueryKey = (options: Options<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdData>) => createQueryKey('getV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookId', options);

export const getV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdOptions = (options: Options<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdQueryKey(options)
    });
};

export const postV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdMutation = (options?: Partial<Options<PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdData>>): UseMutationOptions<PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdResponse, AxiosError<PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdError>, Options<PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdData>> => {
    const mutationOptions: UseMutationOptions<PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdResponse, AxiosError<PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdError>, Options<PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookId({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postV1SpecificationsMutation = (options?: Partial<Options<PostV1SpecificationsData>>): UseMutationOptions<PostV1SpecificationsResponse, AxiosError<PostV1SpecificationsError>, Options<PostV1SpecificationsData>> => {
    const mutationOptions: UseMutationOptions<PostV1SpecificationsResponse, AxiosError<PostV1SpecificationsError>, Options<PostV1SpecificationsData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postV1Specifications({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getV1UsersMeQueryKey = (options?: Options<GetV1UsersMeData>) => createQueryKey('getV1UsersMe', options);

export const getV1UsersMeOptions = (options?: Options<GetV1UsersMeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV1UsersMe({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV1UsersMeQueryKey(options)
    });
};

export const getV1UsersByUserIdApiKeysQueryKey = (options: Options<GetV1UsersByUserIdApiKeysData>) => createQueryKey('getV1UsersByUserIdApiKeys', options);

export const getV1UsersByUserIdApiKeysOptions = (options: Options<GetV1UsersByUserIdApiKeysData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV1UsersByUserIdApiKeys({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV1UsersByUserIdApiKeysQueryKey(options)
    });
};

export const getV1UsersByUserIdApiKeysInfiniteQueryKey = (options: Options<GetV1UsersByUserIdApiKeysData>): QueryKey<Options<GetV1UsersByUserIdApiKeysData>> => createQueryKey('getV1UsersByUserIdApiKeys', options, true);

export const getV1UsersByUserIdApiKeysInfiniteOptions = (options: Options<GetV1UsersByUserIdApiKeysData>) => {
    return infiniteQueryOptions<GetV1UsersByUserIdApiKeysResponse, AxiosError<GetV1UsersByUserIdApiKeysError>, InfiniteData<GetV1UsersByUserIdApiKeysResponse>, QueryKey<Options<GetV1UsersByUserIdApiKeysData>>, string | Pick<QueryKey<Options<GetV1UsersByUserIdApiKeysData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetV1UsersByUserIdApiKeysData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    after: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getV1UsersByUserIdApiKeys({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV1UsersByUserIdApiKeysInfiniteQueryKey(options)
    });
};

export const postV1UsersByUserIdApiKeysMutation = (options?: Partial<Options<PostV1UsersByUserIdApiKeysData>>): UseMutationOptions<PostV1UsersByUserIdApiKeysResponse, AxiosError<PostV1UsersByUserIdApiKeysError>, Options<PostV1UsersByUserIdApiKeysData>> => {
    const mutationOptions: UseMutationOptions<PostV1UsersByUserIdApiKeysResponse, AxiosError<PostV1UsersByUserIdApiKeysError>, Options<PostV1UsersByUserIdApiKeysData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postV1UsersByUserIdApiKeys({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteV1UsersByUserIdApiKeysByApiKeyIdMutation = (options?: Partial<Options<DeleteV1UsersByUserIdApiKeysByApiKeyIdData>>): UseMutationOptions<DeleteV1UsersByUserIdApiKeysByApiKeyIdResponse, AxiosError<DeleteV1UsersByUserIdApiKeysByApiKeyIdError>, Options<DeleteV1UsersByUserIdApiKeysByApiKeyIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteV1UsersByUserIdApiKeysByApiKeyIdResponse, AxiosError<DeleteV1UsersByUserIdApiKeysByApiKeyIdError>, Options<DeleteV1UsersByUserIdApiKeysByApiKeyIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteV1UsersByUserIdApiKeysByApiKeyId({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postV1UsersByUserIdApiKeysByApiKeyIdMutation = (options?: Partial<Options<PostV1UsersByUserIdApiKeysByApiKeyIdData>>): UseMutationOptions<PostV1UsersByUserIdApiKeysByApiKeyIdResponse, AxiosError<PostV1UsersByUserIdApiKeysByApiKeyIdError>, Options<PostV1UsersByUserIdApiKeysByApiKeyIdData>> => {
    const mutationOptions: UseMutationOptions<PostV1UsersByUserIdApiKeysByApiKeyIdResponse, AxiosError<PostV1UsersByUserIdApiKeysByApiKeyIdError>, Options<PostV1UsersByUserIdApiKeysByApiKeyIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postV1UsersByUserIdApiKeysByApiKeyId({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getV1UsersByUserIdRolesQueryKey = (options: Options<GetV1UsersByUserIdRolesData>) => createQueryKey('getV1UsersByUserIdRoles', options);

export const getV1UsersByUserIdRolesOptions = (options: Options<GetV1UsersByUserIdRolesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV1UsersByUserIdRoles({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV1UsersByUserIdRolesQueryKey(options)
    });
};

export const getV1UsersByUserIdRolesInfiniteQueryKey = (options: Options<GetV1UsersByUserIdRolesData>): QueryKey<Options<GetV1UsersByUserIdRolesData>> => createQueryKey('getV1UsersByUserIdRoles', options, true);

export const getV1UsersByUserIdRolesInfiniteOptions = (options: Options<GetV1UsersByUserIdRolesData>) => {
    return infiniteQueryOptions<GetV1UsersByUserIdRolesResponse, AxiosError<GetV1UsersByUserIdRolesError>, InfiniteData<GetV1UsersByUserIdRolesResponse>, QueryKey<Options<GetV1UsersByUserIdRolesData>>, string | Pick<QueryKey<Options<GetV1UsersByUserIdRolesData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetV1UsersByUserIdRolesData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    after: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getV1UsersByUserIdRoles({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV1UsersByUserIdRolesInfiniteQueryKey(options)
    });
};

export const getV1UsersByUserIdWaitlistsQueryKey = (options: Options<GetV1UsersByUserIdWaitlistsData>) => createQueryKey('getV1UsersByUserIdWaitlists', options);

export const getV1UsersByUserIdWaitlistsOptions = (options: Options<GetV1UsersByUserIdWaitlistsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV1UsersByUserIdWaitlists({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV1UsersByUserIdWaitlistsQueryKey(options)
    });
};

export const getV1UsersByUserIdWaitlistsInfiniteQueryKey = (options: Options<GetV1UsersByUserIdWaitlistsData>): QueryKey<Options<GetV1UsersByUserIdWaitlistsData>> => createQueryKey('getV1UsersByUserIdWaitlists', options, true);

export const getV1UsersByUserIdWaitlistsInfiniteOptions = (options: Options<GetV1UsersByUserIdWaitlistsData>) => {
    return infiniteQueryOptions<GetV1UsersByUserIdWaitlistsResponse, AxiosError<GetV1UsersByUserIdWaitlistsError>, InfiniteData<GetV1UsersByUserIdWaitlistsResponse>, QueryKey<Options<GetV1UsersByUserIdWaitlistsData>>, string | Pick<QueryKey<Options<GetV1UsersByUserIdWaitlistsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetV1UsersByUserIdWaitlistsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    after: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getV1UsersByUserIdWaitlists({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV1UsersByUserIdWaitlistsInfiniteQueryKey(options)
    });
};

export const postV1UsersByUserIdWaitlistsMutation = (options?: Partial<Options<PostV1UsersByUserIdWaitlistsData>>): UseMutationOptions<PostV1UsersByUserIdWaitlistsResponse, AxiosError<PostV1UsersByUserIdWaitlistsError>, Options<PostV1UsersByUserIdWaitlistsData>> => {
    const mutationOptions: UseMutationOptions<PostV1UsersByUserIdWaitlistsResponse, AxiosError<PostV1UsersByUserIdWaitlistsError>, Options<PostV1UsersByUserIdWaitlistsData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postV1UsersByUserIdWaitlists({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteV1UsersByUserIdWaitlistsByWaitlistIdMutation = (options?: Partial<Options<DeleteV1UsersByUserIdWaitlistsByWaitlistIdData>>): UseMutationOptions<DeleteV1UsersByUserIdWaitlistsByWaitlistIdResponse, AxiosError<DeleteV1UsersByUserIdWaitlistsByWaitlistIdError>, Options<DeleteV1UsersByUserIdWaitlistsByWaitlistIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteV1UsersByUserIdWaitlistsByWaitlistIdResponse, AxiosError<DeleteV1UsersByUserIdWaitlistsByWaitlistIdError>, Options<DeleteV1UsersByUserIdWaitlistsByWaitlistIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteV1UsersByUserIdWaitlistsByWaitlistId({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const putV1UsersByUserIdWaitlistsByWaitlistIdMutation = (options?: Partial<Options<PutV1UsersByUserIdWaitlistsByWaitlistIdData>>): UseMutationOptions<PutV1UsersByUserIdWaitlistsByWaitlistIdResponse, AxiosError<PutV1UsersByUserIdWaitlistsByWaitlistIdError>, Options<PutV1UsersByUserIdWaitlistsByWaitlistIdData>> => {
    const mutationOptions: UseMutationOptions<PutV1UsersByUserIdWaitlistsByWaitlistIdResponse, AxiosError<PutV1UsersByUserIdWaitlistsByWaitlistIdError>, Options<PutV1UsersByUserIdWaitlistsByWaitlistIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await putV1UsersByUserIdWaitlistsByWaitlistId({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};