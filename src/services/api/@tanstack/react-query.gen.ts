// This file is auto-generated by @hey-api/openapi-ts

import { type Options, coreLoginDestroy, coreLoginRetrieve, coreLoginCreate, coreQrAuthRetrieve, coreQrAuthCreate, coreQrAuthUpdate } from '../sdk.gen';
import { type UseMutationOptions, type DefaultError, queryOptions } from '@tanstack/react-query';
import type { CoreLoginDestroyData, CoreLoginDestroyResponse, CoreLoginRetrieveData, CoreLoginCreateData, CoreLoginCreateResponse, CoreQrAuthRetrieveData, CoreQrAuthCreateData, CoreQrAuthUpdateData } from '../types.gen';
import type { AxiosError } from 'axios';
import { client as _heyApiClient } from '../client.gen';

/**
 * Login/Logout API View
 */
export const coreLoginDestroyMutation = (options?: Partial<Options<CoreLoginDestroyData>>): UseMutationOptions<CoreLoginDestroyResponse, AxiosError<DefaultError>, Options<CoreLoginDestroyData>> => {
    const mutationOptions: UseMutationOptions<CoreLoginDestroyResponse, AxiosError<DefaultError>, Options<CoreLoginDestroyData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await coreLoginDestroy({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: options?.baseURL || (options?.client ?? _heyApiClient).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const coreLoginRetrieveQueryKey = (options?: Options<CoreLoginRetrieveData>) => createQueryKey('coreLoginRetrieve', options);

/**
 * Login/Logout API View
 */
export const coreLoginRetrieveOptions = (options?: Options<CoreLoginRetrieveData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await coreLoginRetrieve({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: coreLoginRetrieveQueryKey(options)
    });
};

/**
 * Login/Logout API View
 */
export const coreLoginCreateMutation = (options?: Partial<Options<CoreLoginCreateData>>): UseMutationOptions<CoreLoginCreateResponse, AxiosError<DefaultError>, Options<CoreLoginCreateData>> => {
    const mutationOptions: UseMutationOptions<CoreLoginCreateResponse, AxiosError<DefaultError>, Options<CoreLoginCreateData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await coreLoginCreate({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const coreQrAuthRetrieveQueryKey = (options?: Options<CoreQrAuthRetrieveData>) => createQueryKey('coreQrAuthRetrieve', options);

/**
 * QR Management API View
 */
export const coreQrAuthRetrieveOptions = (options?: Options<CoreQrAuthRetrieveData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await coreQrAuthRetrieve({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: coreQrAuthRetrieveQueryKey(options)
    });
};

/**
 * QR Management API View
 */
export const coreQrAuthCreateMutation = (options?: Partial<Options<CoreQrAuthCreateData>>): UseMutationOptions<unknown, AxiosError<DefaultError>, Options<CoreQrAuthCreateData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<DefaultError>, Options<CoreQrAuthCreateData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await coreQrAuthCreate({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * QR Management API View
 */
export const coreQrAuthUpdateMutation = (options?: Partial<Options<CoreQrAuthUpdateData>>): UseMutationOptions<unknown, AxiosError<DefaultError>, Options<CoreQrAuthUpdateData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<DefaultError>, Options<CoreQrAuthUpdateData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await coreQrAuthUpdate({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};